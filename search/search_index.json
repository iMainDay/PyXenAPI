{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PyXenAPI PyXenAPI \u2014 A modern solution for interacting with the Restful XenForo API in Python","title":"Welcome"},{"location":"#welcome-to-pyxenapi","text":"PyXenAPI \u2014 A modern solution for interacting with the Restful XenForo API in Python","title":"Welcome to PyXenAPI"},{"location":"install/","text":"Download library At the moment, the library can be installed in the following ways: From Github PyPi pip install -U https://github.com/iMainDay/PyXenApi/archive/master.zip pip install PyXenApi Create instance 1 2 3 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'myApiToken' , 'https://mydomain.com/api/' ) Warning The domain parameter must be passed as a link , including http:// or https:// and ending with the api endpoint. Example: https://xenforo.com/api/","title":"Installation"},{"location":"install/#download-library","text":"At the moment, the library can be installed in the following ways: From Github PyPi pip install -U https://github.com/iMainDay/PyXenApi/archive/master.zip pip install PyXenApi","title":"Download library"},{"location":"install/#create-instance","text":"1 2 3 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'myApiToken' , 'https://mydomain.com/api/' ) Warning The domain parameter must be passed as a link , including http:// or https:// and ending with the api endpoint. Example: https://xenforo.com/api/","title":"Create instance"},{"location":"api/alerts/","text":"getAlerts() Gets the API user's list of alerts Parameters Parameter Type Description None Response Output Type Description alerts UserAlert[] Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getAlerts () return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"getAlerts()"},{"location":"api/alerts/#getalerts","text":"Gets the API user's list of alerts","title":"getAlerts()"},{"location":"api/alerts/#parameters","text":"Parameter Type Description None","title":"Parameters"},{"location":"api/alerts/#response","text":"Output Type Description alerts UserAlert[]","title":"Response"},{"location":"api/alerts/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getAlerts () return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/conversationmessage/","text":"getConversationMessage() Gets the specified conversation message. Parameters Parameter Type Description message_id integer required Response Output Type Description message ConversationMessage Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getConversationMessage ( 1 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"getConversationMessage()"},{"location":"api/conversationmessage/#getconversationmessage","text":"Gets the specified conversation message.","title":"getConversationMessage()"},{"location":"api/conversationmessage/#parameters","text":"Parameter Type Description message_id integer required","title":"Parameters"},{"location":"api/conversationmessage/#response","text":"Output Type Description message ConversationMessage","title":"Response"},{"location":"api/conversationmessage/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getConversationMessage ( 1 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/conversations/","text":"getConversations() Gets the API user's list of conversations. Parameters Parameter Type Description None Response Output Type Description conversations Conversation[] Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getConversations () return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"getConversations()"},{"location":"api/conversations/#getconversations","text":"Gets the API user's list of conversations.","title":"getConversations()"},{"location":"api/conversations/#parameters","text":"Parameter Type Description None","title":"Parameters"},{"location":"api/conversations/#response","text":"Output Type Description conversations Conversation[]","title":"Response"},{"location":"api/conversations/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getConversations () return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/deletepost/","text":"deletePost() Deletes the specified post. Default to soft deletion. Parameters Parameter Type Description post_id integer required hard_delete boolean reason string author_alert boolean author_alert_reason string Response Output Type Description success true Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . deletePost ( 1 , False , 'test reason' ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"deletePost()"},{"location":"api/deletepost/#deletepost","text":"Deletes the specified post. Default to soft deletion.","title":"deletePost()"},{"location":"api/deletepost/#parameters","text":"Parameter Type Description post_id integer required hard_delete boolean reason string author_alert boolean author_alert_reason string","title":"Parameters"},{"location":"api/deletepost/#response","text":"Output Type Description success true","title":"Response"},{"location":"api/deletepost/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . deletePost ( 1 , False , 'test reason' ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/forum/","text":"getForum() Gets information about the specified forum Parameters Parameter Type Description forum_id integer required Response Output Type Description forum Forum threads Thread[] Threads on this page Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getConversationMessage ( 1 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"getForum()"},{"location":"api/forum/#getforum","text":"Gets information about the specified forum","title":"getForum()"},{"location":"api/forum/#parameters","text":"Parameter Type Description forum_id integer required","title":"Parameters"},{"location":"api/forum/#response","text":"Output Type Description forum Forum threads Thread[] Threads on this page","title":"Response"},{"location":"api/forum/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getConversationMessage ( 1 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/me/","text":"getMe() Gets information about the current API user Parameters Parameter Type Description None Response Output Type Description me User Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getMe () return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"getMe()"},{"location":"api/me/#getme","text":"Gets information about the current API user","title":"getMe()"},{"location":"api/me/#parameters","text":"Parameter Type Description None","title":"Parameters"},{"location":"api/me/#response","text":"Output Type Description me User","title":"Response"},{"location":"api/me/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getMe () return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/node/","text":"getNode() Gets information about the specified node Parameters Parameter Type Description node_id integer required Response Output Type Description node Node Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getNode ( 2 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"getNode()"},{"location":"api/node/#getnode","text":"Gets information about the specified node","title":"getNode()"},{"location":"api/node/#parameters","text":"Parameter Type Description node_id integer required","title":"Parameters"},{"location":"api/node/#response","text":"Output Type Description node Node","title":"Response"},{"location":"api/node/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getNode ( 2 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/nodes/","text":"getNodes() Gets the node tree. Parameters Parameter Type Description None Response Output Type Description nodes Node[] List of all nodes Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getNodes () return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"getNodes()"},{"location":"api/nodes/#getnodes","text":"Gets the node tree.","title":"getNodes()"},{"location":"api/nodes/#parameters","text":"Parameter Type Description None","title":"Parameters"},{"location":"api/nodes/#response","text":"Output Type Description nodes Node[] List of all nodes","title":"Response"},{"location":"api/nodes/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getNodes () return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/post/","text":"getPost() Gets information about the specified post Parameters Parameter Type Description post_id integer required Response Output Type Description post Post Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getPost ( 1 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"getPost()"},{"location":"api/post/#getpost","text":"Gets information about the specified post","title":"getPost()"},{"location":"api/post/#parameters","text":"Parameter Type Description post_id integer required","title":"Parameters"},{"location":"api/post/#response","text":"Output Type Description post Post","title":"Response"},{"location":"api/post/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getPost ( 1 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/profilepostcomment/","text":"getProfilePostComment() Gets information about the specified profile post comment. Parameters Parameter Type Description comment_id integer required Response Output Type Description node ProfilePostComment Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getProfilePostComment ( 1 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"getProfilePostComment()"},{"location":"api/profilepostcomment/#getprofilepostcomment","text":"Gets information about the specified profile post comment.","title":"getProfilePostComment()"},{"location":"api/profilepostcomment/#parameters","text":"Parameter Type Description comment_id integer required","title":"Parameters"},{"location":"api/profilepostcomment/#response","text":"Output Type Description node ProfilePostComment","title":"Response"},{"location":"api/profilepostcomment/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . getProfilePostComment ( 1 ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"},{"location":"api/replytoconversation/","text":"replyToConversation() Replies to a conversation Parameters Parameter Type Description conversation_id integer required message string required attachment_key string API attachment key to upload files. Response Output Type Description success true message ConversationMessage The newly inserted message Example 1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . replyToConversation ( 1 , \"Hello, world!\" ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"replyToConversation()"},{"location":"api/replytoconversation/#replytoconversation","text":"Replies to a conversation","title":"replyToConversation()"},{"location":"api/replytoconversation/#parameters","text":"Parameter Type Description conversation_id integer required message string required attachment_key string API attachment key to upload files.","title":"Parameters"},{"location":"api/replytoconversation/#response","text":"Output Type Description success true message ConversationMessage The newly inserted message","title":"Response"},{"location":"api/replytoconversation/#example","text":"1 2 3 4 5 6 7 8 9 10 from PyXenApi import XenForoAPI xf = XenForoAPI ( 'token' , 'domain' ) def main (): data = xf . replyToConversation ( 1 , \"Hello, world!\" ) return print ( json . dumps ( data , indent = 4 , sort_keys = True )) if __name__ == '__main__' : main ()","title":"Example"}]}